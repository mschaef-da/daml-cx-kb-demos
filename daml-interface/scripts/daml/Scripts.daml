{-# LANGUAGE ApplicativeDo #-}

module Scripts where

import DA.Foldable (forA_)
import DA.TextMap (lookup)

import Daml.Script

import V1.Main qualified as V1
import V2.Main qualified as V2

ensureParty : Text -> Script Party
ensureParty partyName = do
  knownParties <- listKnownParties

  case find (\pd -> pd.displayName == Some partyName) knownParties of
    Some p -> pure p.party
    None -> do
      party <- allocatePartyWithHint partyName (PartyIdHint partyName)
      partyId <- validateUserId partyName
      createUser (User partyId (Some party)) [CanActAs party]
      pure party

batchCommand : Int -> [Commands ()] -> [Commands ()]
batchCommand n [] = []
batchCommand n (xs) =
  let (batch,rest) = splitAt n xs
  in forA_ batch identity :: batchCommand n rest

batchSize = 100
contractGroups = 10

ensureTestParties : Script Party
ensureTestParties = do
  ensureParty "alice"
  ensureParty "bob"
  ensureParty "charlie"
  ensureParty "danielle"

createTestContracts parties = do
  case DA.TextMap.lookup "alice" parties of
    None -> error ("Missing party ID for alice")
    Some(party) -> do
      debugRaw $ "Generating commands to create " <> (show contractGroups) <> " contract group(s)."
      batches <- batchCommand batchSize <$> forA [0..contractGroups-1] (\ii -> do
        let
          commands = do
            createCmd V1.Point with
              owner = party
              x = 3.0
              y = 4.0
            createCmd V2.Point with
              owner = party
              x = 5.0
              y = 12.0
            pure ()
        pure commands)
      debugRaw $ "Submitting " <> (show (length batches)) <> " batches with " <> (show batchSize) <> " commands each."
      forA_ batches (\batch -> do
        debugRaw "Submitting batch..."
        submit party batch)
      pure ()